  openapi: 3.0.0
  servers:
    - description: SwaggerHub API Auto Mocking
      url: https://virtserver.swaggerhub.com/MANUEL42994299/2.2/1.0.0
  info:
    description: This is an API for a recipes site
    version: "1.0.0"
    title: Recipes API
  tags:
    - name: auth
      description: Operations about authentication
    - name: recipes
      description: Operations about recipes
    - name: users
      description: Operations about users


  paths:
  # auth
    /auth/Register:
      post:
        tags:
          - auth
        summary: register
        operationId: register
        description: |
          register to the site
        parameters:
          - in: query
            name: username
            description: your username
            required: true
            schema:
              type: string
              minimum: 3
              maximum: 8
          - in: query
            name: first_name
            description: your first name
            required: true
            schema:
              type: string
          - in: query
            name: last_name
            description: your last name
            required: true
            schema:
              type: string
          - in: query
            name: country
            description: your country
            required: true
            schema:
              type: string
          - in: query
            name: email
            description: your email
            required: true
            schema:
              type: string
          - in: query
            name: password
            description: your password
            required: true
            schema:
              type: string
              minimum: 5
              maximum: 10
          - in: query
            name: password_confirmation
            description: confirm your password
            required: true
            schema:
              type: string
        responses:
          '201':
            description: register successful
            content:
              application/json:
                schema:
                  type: string
                  example: User created
          '409':
            description: Username already exists
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Username already exists

    /auth/Login:
      post:
        tags:
          - auth
        summary: log in
        operationId: logIn
        description: |
          log in to the site
        parameters:
          - in: query
            name: username
            description: your username
            required: true
            schema:
              type: string
          - in: query
            name: password
            description: your password
            required: true
            schema:
              type: string
        responses:
          '200':
            description: log in successful
            content:
              application/json:
                schema:
                  type: string
                  example: log in successful
          '401':
            description: Username or Password incorrect
            content:
              application/json:
                schema:
                  type: string
                  example: Username or Password incorrect

    /auth/Logout:
      post:
        tags:
          - auth
        summary: log out
        operationId: logOut
        description: |
          log out from the site
        responses:
          '200':
            description: log out successful
            content:
              application/json:
                schema:
                  type: string
                  example: log out successful
            
      
    
  # recipes
        
    /recipes/search:
      get:
        tags:
          - recipes
        summary: searches for recipe
        operationId: searchForRecipe
        description: |
          By passing in the value of the search, you can search for the proper recipes by some filters
        parameters:
          - in: query
            name: searchString
            description: pass an optional search string for looking up recipes
            required: false
            schema:
              type: string
          - in: query
            name: limit
            description: number of results you want to get back from search
            schema:
              type: integer
              format: int32
              minimum: 5
              maximum: 15
            required: false
          - in: query
            name: filter_diet
            description: the diet you want to filter by (katogenic, veegan, etc)
            schema:
              type: string
            required: false
          - in: query
            name: filter_cuisine
            description: the cuisine you want to filter by (italian, asian, etc)
            schema:
              type: string
            required: false
          - in: query
            name: filter_intolerance
            description: the intolerance you want to filter by (dairy, peanut, etc)
            schema:
              type: string
            required: false
        responses:
          '200':
            description: search results matching criteria
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/recipe_preview'
          '404':
            description: recipe with these filters or text not found
            content:
              application/json:
                schema:
                  type: string
                  example: recipe with these filters or text not found

    /recipes/random:
      get:
        tags:
          - recipes
        summary: get random recipes for main page recipe preview
        operationId: getRandomRecipes
        description: |
          you can get some random recipes to preview in the main page
        parameters:
          - in: query
            name: limit
            description: number of randoms you want to get back 
            schema:
              type: integer
              format: int32
            required: false
        responses:
          '200':
            description: random recipe
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/recipe_preview'

    /recipes/{recipeId}:
      get:
        tags:
          - recipes
        summary: get recipe by id
        operationId: getRecipeById
        description: |
          get a recipe by its id
          it will also write this recipe to the user's history (last viewed recipes)
        parameters:
          - in: path
            name: recipeId
            description: ID of recipe to return
            required: true
            schema:
              type: integer
              format: int32
          - in: query
            name: username
            description: username of user to write this recipe to his/her history
            required: false
            schema:
              type: string
        responses:
          '200':
            description: recipe data
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/recipe_full_view'
          '404':
            description: recipe not found
            content:
              application/json:
                schema:
                  type: string
                  example: recipe information not found

  # users
    /users/favorites:
      get:
        tags:
          - users
        summary: get user's favorite recipes
        operationId: getFavoriteRecipes
        description: |
          get user's favorite recipes 
        responses:
          '200':
            description: user's favorite recipes
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/recipe_preview'
          '401':
            description: session expired
            content:
              application/json:
                schema:
                  type: string
                  example: you need to log in first 
          '404':
            description: user not found
            content:
              application/json:
                schema:
                  type: string
                  example: user not found


      post:
        tags:
          - users
        summary: Add recipe to user's favorites 
        operationId: addRecipeToFavorites
        description: Add a recipe to user's favorites
        parameters:
          - in: query
            name: recipeId
            description: ID of recipe to add to favorites
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Recipe successfully added to favorites or meal plan
          '401':
            description: session expired
            content:
              application/json:
                schema:
                  type: string
                  example: you need to log in first

      delete:
        tags:
          - users
        summary: remove recipe from user's favorite
        operationId: removeRecipeFromFavorites
        description: |
          remove a recipe from user's favorite
        parameters:
          - in: query
            name: recipeId
            description: ID of recipe to remove from favorite
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: recipe removed from favorite
            content:
              application/json:
                schema:
                  type: string
                  example: recipe removed from favorite
          '401':
            description: session expired
            content:
              application/json:
                schema:
                  type: string
                  example: you need to log in first
  
    /users/meals:
      get:
        tags:
          - users
        summary: get user's meal plan
        operationId: getMealPlan
        description: |
          get user's meal plan
        responses:
          '200':
            description: user's meal plan
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/recipe_preview'
          '404':
            description: user not found
            content:
              application/json:
                schema:
                  type: string
                  example: user not found
          '401':
            description: session expired
            content:
              application/json:
                schema:
                  type: string
                  example: you need to log in first 

      post:
        tags:
          - users
        summary: Add recipe to user's meal plan 
        operationId: addRecipeToMealPlan
        description: Add a recipe to user's meal plan
        parameters:
          - in: query
            name: recipeId
            description: ID of recipe to add to meal plan
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Recipe successfully added to favorites or meal plan
          '409':
            description: Recipe already exists in meal plan
            content:
              application/json:
                schema:
                  type: string
                  example: Recipe already exists in meal plan
          '404':
            description: Recipe or user not found
            content:
              application/json:
                schema:
                  type: string
                  example: Recipe or user not found
      
      delete:
        tags:
          - users
        summary: remove recipe from user's meal plan
        operationId: removeRecipeFromMealPlan
        description: |
          remove a recipe from user's meal plan
          if no recipeid is passed, all the recipes will be removed for the user
        parameters:
          - in: query
            name: recipeId
            description: ID of recipe to remove from meal plan
            required: false
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: recipe removed from meal plan
            content:
              application/json:
                schema:
                  type: string
                  example: recipe removed from meal plan
          '401':
            description: session expired
            content:
              application/json:
                schema:
                  type: string
                  example: you need to log in first 

    /users/lastview:
      get:
        tags:
          - users
        summary: get user's last viewed recipes
        operationId: getLastViewedRecipes
        description: |
          get user's last viewed recipes
        responses:
          '200':
            description: user's last viewed recipes
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/recipe_preview'
          '401':
            description: session expired
            content:
              application/json:
                schema:
                  type: string
                  example: you need to log in first 
          '404':
            description: user not found
            content:
              application/json:
                schema:
                  type: string
                  example: user not found
          
      post:
        tags:
          - users
        summary: Add recipe to user's last viewed recipes 
        operationId: addRecipeToLastViewed
        description: Add a recipe to user's last viewed recipes
        parameters:
          - in: query
            name: recipeId
            description: ID of recipe to add to last viewed
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Recipe successfully added to last viewed
          '401':
            description: session expired
            content:
              application/json:
                schema:
                  type: string
                  example: you need to log in first 

    /users/myrecipes:
      get:
        tags:
          - users
        summary: get user's recipes
        operationId: getMyRecipes
        description: |
          get user's recipes, my recipes- the ones he created
        responses:
          '200':
            description: user's recipes
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/recipe_preview'
          '401':
            description: session expired
            content:
              application/json:
                schema:
                  type: string
                  example: you need to log in first 
          '404':
            description: user not found
            content:
              application/json:
                schema:
                  type: string
                  example: user not found

      post: 
        tags:
          - users
        summary: add recipe
        operationId: addRecipe
        description: |
          add a recipe to my recipes for a username
        parameters:
          - in: query
            name: title
            description: title of the recipe
            required: true
            schema:
              type: string
          - in: query
            name: image
            description: image of the recipe
            required: true
            schema:
              type: string
              format: uri
          - in: query
            name: instructions
            description: instructions of the recipe
            required: true
            schema:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
          - in: query
            name: readyInMinutes
            description: time to make the recipe
            required: true
            schema:
              type: integer
          - in: query
            name: servings
            description: number of servings
            required: true
            schema:
              type: integer
          - in: query
            name: vegetarian
            description: is the recipe vegetarian
            required: true
            schema:
              type: boolean
          - in: query
            name: vegan
            description: is the recipe vegan
            required: true
            schema:
              type: boolean
          - in: query
            name: glutenFree
            description: is the recipe gluten free
            required: true
            schema:
              type: boolean
          - in: query
            name: ingredients
            description: ingredients of the recipe
            required: true
            schema:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string

        responses:      
          '200':
            description: recipe added successfully
            content:
              application/json:
                schema:
                  type: string
                  example: recipe added successfully
          '401':
            description: session expired
            content:
              application/json:
                schema:
                  type: string
                  example: you need to log in first 
    
    /users/myrecipes/{recipeId}:
      get:
        tags:
          - users
        summary: get user's recipe by id
        operationId: getMyRecipeById
        description: |
          get a user's recipe by its id
        parameters:
          - in: path
            name: recipeId
            description: ID of recipe to return
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: recipe data
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/recipe_full_view'
          '401':
            description: session expired
            content:
              application/json:
                schema:
                  type: string
                  example: you need to log in first 
          '404':
            description: user not found
            content:
              application/json:
                schema:
                  type: string
                  example: user not found
    
    /users/FavoriteAndViewed:
      get:
        tags:
          - users
        summary: Get user's favorite and last viewed recipes
        operationId: getFavoriteAndViewedRecipes
        description: Retrieve user's favorite and last viewed recipes
        responses:
          '200':
            description: User's favorite and last viewed recipes
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    favoriteList:
                      type: array
                      items:
                        $ref: '#/components/schemas/favoriteRecipe'
                    lastViewedList:
                      type: array
                      items:
                        $ref: '#/components/schemas/lastViewedRecipe'
          '401':
            description: session expired
            content:
              application/json:
                schema:
                  type: string
                  example: you need to log in first 



  components:
    schemas:
      recipe_preview:
        type: object
        required:
          - id
          - image
          - title
          - readyInMinutes
          - aggregateLikes
          - vegetarian
          - vegan
          - glutenFree
          - summary
        properties:
          id:
            type: integer
            example: 716429
          image:
            type: string
            format: uri
            example: "https://img.spoonacular.com/recipes/716429-556x370.jpg"
          title:
            type: string
            example: "Pasta with Garlic, Scallions, Cauliflower & Breadcrumbs"
          readyInMinutes:
            type: integer
            example: 45
          aggregateLikes:
            type: integer
            example: 209
          vegetarian:
            type: boolean
            example: false
          vegan:
            type: boolean
            example: false
          glutenFree:
            type: boolean
            example: false
          summary:
            type: string
            example: "You can never have too many main course recipes..."
      
      recipe_full_view:
        type: object
        required:
          - id
          - image
          - title
          - readyInMinutes
          - aggregateLikes
          - vegetarian
          - vegan
          - glutenFree
          - summary
          - analyzedInstructions
          - extendedIngredients
          - servings
        properties:
          id:
            type: integer
            example: 716429
          image:
            type: string
            format: uri
            example: "https://img.spoonacular.com/recipes/716429-556x370.jpg"
          title:
            type: string
            example: "Pasta with Garlic, Scallions, Cauliflower & Breadcrumbs"
          readyInMinutes:
            type: integer
            example: 45
          aggregateLikes:
            type: integer
            example: 209
          vegetarian:
            type: boolean
            example: false
          vegan:
            type: boolean
            example: false
          glutenFree:
            type: boolean
            example: false
          summary:
            type: string
            example: "You can never have too many main course recipes, so give Pasta with Garlic, Scallions, Cauliflower & Breadcrumbs a try. One serving contains <b>543 calories</b>, <b>17g of protein</b>, and <b>16g of fat</b>. For <b>$1.57 per serving</b>, this recipe <b>covers 22%</b> of your daily requirements of vitamins and minerals. This recipe serves 2. A mixture of butter, white wine, pasta, and a handful of other ingredients are all it takes to make this recipe so yummy. 209 people have tried and liked this recipe. It is brought to you by fullbellysisters.blogspot.com. From preparation to the plate, this recipe takes approximately <b>45 minutes</b>. Taking all factors into account, this recipe <b>earns a spoonacular score of 83%</b>, which is tremendous. If you like this recipe, take a look at these similar recipes: <a href=\"https://spoonacular.com/recipes/pasta-with-garlic-scallions-cauliflower-breadcrumbs-1230187\">Pasta with Garlic, Scallions, Cauliflower & Breadcrumbs</a>, <a href=\"https://spoonacular.com/recipes/pasta-with-garlic-scallions-cauliflower-breadcrumbs-1229807\">Pasta with Garlic, Scallions, Cauliflower & Breadcrumbs</a>, and <a href=\"https://spoonacular.com/recipes/pasta-with-garlic-scallions-cauliflower-breadcrumbs-1229669\">Pasta with Garlic, Scallions, Cauliflower & Breadcrumbs</a>."
          analyzedInstructions:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                  example: ""
                steps:
                  type: array
                  items:
                    type: object
                    properties:
                      number:
                        type: integer
                        example: 1
                      step:
                        type: string
                        example: "Boil water in a large pot. Cook pasta according to package instructions."
          extendedIngredients:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  example: 1001
                aisle:
                  type: string
                  example: "Milk, Eggs, Other Dairy"
                image:
                  type: string
                  format: uri
                  example: "butter-sliced.jpg"
                consistency:
                  type: string
                  example: "SOLID"
                name:
                  type: string
                  example: "butter"
                original:
                  type: string
                  example: "1 tbsp butter"
                amount:
                  type: number
                  example: 1.0
                unit:
                  type: string
                  example: "tbsp"
          servings:
            type: integer
            example: 2

      favoriteRecipe:
        type: object
        properties:
          recipe_id:
            type: integer
          recipe_name:
            type: string

      lastViewedRecipe:
        type: object
        properties:
          recipe_id:
            type: integer
          recipe_name:
            type: string
